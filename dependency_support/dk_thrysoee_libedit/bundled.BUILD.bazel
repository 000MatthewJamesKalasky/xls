# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Description:
#   Line editor library.
#
# Use the "pretend_to_be_gnu_readline" libraries if your client wants to use
# readline-like APIs for libedit.  Use "native" libraries if your client wants
# to use native libedit APIs.

# Provides headers for edit_impl.
load(
    "@com_google_xls//dependency_support/dk_thrysoee_libedit:build_defs.bzl",
    "makelist_genrules",
    "makelist_headers",
)
load("@com_google_xls//dependency_support:copy.bzl", "copy")
load("@com_google_xls//dependency_support:pseudo_configure.bzl", "pseudo_configure")

licenses(["notice"])  # BSD

exports_files(["LICENSE"])

GNU_READLINE_IMITATION_HEADERS = [
    "include/readline/history.h",
    "include/readline/readline.h",
]

# Provides the readline-like interface.
# #include <readline/readline.h>
cc_library(
    name = "pretend_to_be_gnu_readline_system",
    hdrs = GNU_READLINE_IMITATION_HEADERS,
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        ":edit_impl",
    ],
)

# Provides the readline-like interface.
# #include <readline.h>
cc_library(
    name = "pretend_to_be_gnu_readline_system_toplevel",
    hdrs = GNU_READLINE_IMITATION_HEADERS,
    includes = ["include/readline"],
    visibility = ["//visibility:public"],
    deps = [
        ":edit_impl",
    ],
)

# Provides the libedit interface.
# #include <editline/readline.h>
# #include <histedit.h>
cc_library(
    name = "native_system",
    hdrs = [
        "src/editline/readline.h",
        "src/histedit.h",
    ],
    includes = ["src"],
    visibility = ["//visibility:public"],
    deps = [":edit_impl"],
)

makelist_genrules()

# The common target for libedit.  Singular to avoid recompilation of files
# across the multiple #include approaches.
cc_library(
    name = "edit_impl",
    srcs = glob(
        [
            "src/*.c",
            "src/*.h",
        ],
    ) + [
        # Generated file is not found by glob.
        "src/config.h",
    ] + makelist_headers,
    hdrs = [
        "src/editline/readline.h",
        # Used as includes; otherwise, these cause compiler errors.
        "src/history.c",
        "src/tokenizer.c",
    ],
    copts = [
        "-Wno-implicit-function-declaration",  # strlcpy is defined but not included
        "-Wno-unused-result",
        "-Wno-pointer-sign",
    ],
    defines = ["HAVE_GETPW_R_POSIX"],
    features = ["-parse_headers"],
    includes = ["src"],
    deps = [
        "@net_invisible_island_ncurses//:ncurses",
    ],
)

# A tiny example binary.
cc_binary(
    name = "readline_example",
    srcs = ["@com_google_xls//dependency_support/dk_thrysoee_libedit:readline_example.cc"],
    deps = [
        ":pretend_to_be_gnu_readline_system_toplevel",
    ],
)

# Simple test to verify compilation.
cc_test(
    name = "readline_test",
    size = "small",
    srcs = ["@com_google_xls//dependency_support/dk_thrysoee_libedit:readline_test.cc"],
    deps = [
        ":pretend_to_be_gnu_readline_system",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

forwarding_header_contents = """
// libedit combines the functionality of GNU's readline.h and history.h in one
// header, so this file is just a stub.

#ifndef DK_THRYSOEE_LIBEDIT_READLINE_H
#define DK_THRYSOEE_LIBEDIT_READLINE_H

#include "editline/readline.h"

#endif  // DK_THRYSOEE_LIBEDIT_READLINE_H
"""
[genrule(
    name = "%s_h" % name,
    outs = ["include/readline/%s.h" % name],
    cmd = "cat > $@ << 'BAZEL_EOF'\n" + forwarding_header_contents.replace('$', '$$') + "\nBAZEL_EOF",
) for name in ["history", "readline"]]

pseudo_configure(
    name = "config_h",
    src = "config.h.in",
    out = "src/config.h",
      defs = ['HAVE_CURSES_H', 'HAVE_DIRENT_H', 'HAVE_DLFCN_H', 'HAVE_ENDPWENT', 'HAVE_FCNTL_H', 'HAVE_FORK', 'HAVE_GETLINE', 'HAVE_INTTYPES_H', 'HAVE_ISASCII', 'HAVE_LIBNCURSES', 'HAVE_LIMITS_H', 'HAVE_MALLOC_H', 'HAVE_MEMCHR', 'HAVE_MEMORY_H', 'HAVE_MEMSET', 'HAVE_NCURSES_H', 'HAVE_REGCOMP', 'HAVE_RE_COMP', 'HAVE_SECURE_GETENV', 'HAVE_STDINT_H', 'HAVE_STDLIB_H', 'HAVE_STRCASECMP', 'HAVE_STRCHR', 'HAVE_STRCSPN', 'HAVE_STRDUP', 'HAVE_STRERROR', 'HAVE_STRINGS_H', 'HAVE_STRING_H', 'HAVE_STRLCAT', 'HAVE_STRRCHR', 'HAVE_STRSTR', 'HAVE_STRTOL', 'HAVE_SYS_CDEFS_H', 'HAVE_SYS_IOCTL_H', 'HAVE_SYS_PARAM_H', 'HAVE_SYS_STAT_H', 'HAVE_SYS_TYPES_H', 'HAVE_SYS_WAIT_H', 'HAVE_TERMCAP_H', 'HAVE_TERM_H', 'HAVE_UNISTD_H', 'HAVE_U_INT32_T', 'HAVE_VFORK', 'HAVE_WCSDUP', 'HAVE_WORKING_FORK', 'HAVE_WORKING_VFORK', 'LSTAT_FOLLOWS_SLASHED_SYMLINK', 'STDC_HEADERS', '_ALL_SOURCE', '_GNU_SOURCE', '_POSIX_PTHREAD_SEMANTICS', '_TANDEM_SOURCE', '__EXTENSIONS__'],
        mappings = {'HAVE_STRLCPY': '0', 'LT_OBJDIR': '".libs"', 'PACKAGE': '"libedit-20180525"', 'PACKAGE_BUGREPORT': '""', 'PACKAGE_NAME': '"libedit"', 'PACKAGE_STRING': '"libedit 3.1"', 'PACKAGE_TARNAME': '"libedit-20180525"', 'PACKAGE_URL': '""', 'PACKAGE_VERSION': '"3.1"', 'RETSIGTYPE': 'void', 'VERSION': '"3.1"', 'SCCSID': '', 'lint': ''},
)


