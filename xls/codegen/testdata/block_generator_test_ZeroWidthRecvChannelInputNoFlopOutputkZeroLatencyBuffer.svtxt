module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire in_valid,
  input wire out_ready,
  output wire [31:0] out_data,
  output wire out_valid,
  output wire in_ready
);
  reg [31:0] __out_data_skid_reg;
  reg __out_data_valid_skid_reg;
  wire p0_all_active_states_valid;
  wire out_data_from_skid_rdy;
  wire __out_valid_buf;
  wire out_data_to_is_not_rdy;
  wire [31:0] __out_data_buf;
  wire p0_stage_done;
  wire out_data_skid_data_load_en;
  wire out_data_skid_valid_set_zero;
  wire [31:0] out_data_select;
  wire out_data_valid_or;
  wire pipeline_enable;
  wire out_data_skid_valid_load_en;
  assign p0_all_active_states_valid = 1'h1;
  assign out_data_from_skid_rdy = ~__out_data_valid_skid_reg;
  assign __out_valid_buf = in_valid & p0_all_active_states_valid & 1'h1;
  assign out_data_to_is_not_rdy = ~out_ready;
  assign __out_data_buf = 32'h0000_0019;
  assign p0_stage_done = p0_all_active_states_valid & in_valid & out_data_from_skid_rdy;
  assign out_data_skid_data_load_en = __out_valid_buf & out_data_from_skid_rdy & out_data_to_is_not_rdy;
  assign out_data_skid_valid_set_zero = __out_data_valid_skid_reg & out_ready;
  assign out_data_select = __out_data_valid_skid_reg ? __out_data_skid_reg : __out_data_buf;
  assign out_data_valid_or = __out_valid_buf | __out_data_valid_skid_reg;
  assign pipeline_enable = p0_stage_done & p0_stage_done;
  assign out_data_skid_valid_load_en = out_data_skid_data_load_en | out_data_skid_valid_set_zero;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __out_data_skid_reg <= 32'h0000_0000;
      __out_data_valid_skid_reg <= 1'h0;
    end else begin
      __out_data_skid_reg <= out_data_skid_data_load_en ? __out_data_buf : __out_data_skid_reg;
      __out_data_valid_skid_reg <= out_data_skid_valid_load_en ? out_data_from_skid_rdy : __out_data_valid_skid_reg;
    end
  end
  assign out_data = out_data_select;
  assign out_valid = out_data_valid_or;
  assign in_ready = pipeline_enable;
endmodule
