module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire [31:0] in_data,
  input wire in_valid,
  input wire out_ready,
  output wire out_valid,
  output wire in_ready
);
  reg [31:0] __in_data_reg;
  reg __in_data_valid_reg;
  reg __out_data_valid_reg;
  wire p0_all_active_states_valid;
  wire out_data_valid_inv;
  wire __out_valid_buf;
  wire out_data_valid_load_en;
  wire out_data_load_en;
  wire p0_all_active_states_ready;
  wire p0_stage_done;
  wire pipeline_enable;
  wire in_data_valid_inv;
  wire in_data_valid_load_en;
  wire in_data_load_en;
  assign p0_all_active_states_valid = 1'h1;
  assign out_data_valid_inv = ~__out_data_valid_reg;
  assign __out_valid_buf = __in_data_valid_reg & p0_all_active_states_valid & 1'h1;
  assign out_data_valid_load_en = out_ready | out_data_valid_inv;
  assign out_data_load_en = __out_valid_buf & out_data_valid_load_en;
  assign p0_all_active_states_ready = 1'h1;
  assign p0_stage_done = p0_all_active_states_valid & __in_data_valid_reg & out_data_load_en & p0_all_active_states_ready;
  assign pipeline_enable = p0_stage_done & p0_stage_done;
  assign in_data_valid_inv = ~__in_data_valid_reg;
  assign in_data_valid_load_en = pipeline_enable | in_data_valid_inv;
  assign in_data_load_en = in_valid & in_data_valid_load_en;
  always @ (posedge clk) begin
    if (rst) begin
      __in_data_reg <= 32'h0000_0000;
      __in_data_valid_reg <= 1'h0;
      __out_data_valid_reg <= 1'h0;
    end else begin
      __in_data_reg <= in_data_load_en ? in_data : __in_data_reg;
      __in_data_valid_reg <= in_data_valid_load_en ? in_valid : __in_data_valid_reg;
      __out_data_valid_reg <= out_data_valid_load_en ? __out_valid_buf : __out_data_valid_reg;
    end
  end
  assign out_valid = __out_data_valid_reg;
  assign in_ready = in_data_load_en;
endmodule
