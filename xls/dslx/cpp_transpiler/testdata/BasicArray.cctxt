// AUTOMATICALLY GENERATED FILE FROM `xls/dslx/cpp_transpiler`. DO NOT EDIT!
#include <vector>

#include "fake_path.h"
#include "absl/base/macros.h"
#include "absl/status/status.h"
#include "absl/types/span.h"

absl::StatusOr<MyStruct> MyStruct::FromValue(const ::xls::Value& value) {
  if (value.size() != 3) {
    return absl::InvalidArgumentError(
        "MyStruct::FromValue input must be a 3-tuple.");
  }

  MyStruct result;
  for (int idx_1 = 0; idx_1 < 32; idx_1++) {
    result.x[idx_1] = value.element(0).element(idx_1).bits().ToUint64().value();
  }
  for (int idx_1 = 0; idx_1 < 8; idx_1++) {
    result.y[idx_1] = value.element(1).element(idx_1).bits().ToInt64().value();
  }
  for (int idx_1 = 0; idx_1 < 7; idx_1++) {
    result.z[idx_1] = value.element(2).element(idx_1).bits().ToUint64().value();
  }
  return result;
}

::xls::Value MyStruct::ToValue() const {
  std::vector<::xls::Value> members;
  members.reserve(3);
  ::xls::Value x_value;
  std::vector<::xls::Value> x_elements;
  x_elements.reserve(ABSL_ARRAYSIZE(x));
  for (int idx_1 = 0; idx_1 < ABSL_ARRAYSIZE(x); idx_1++) {
    ::xls::Value x_element;
    x_element = ::xls::Value(::xls::UBits(x[idx_1], /*bit_count=*/32));
    x_elements.push_back(x_element);
  }
  x_value = ::xls::Value::ArrayOrDie(x_elements);
  members.push_back(x_value);
  ::xls::Value y_value;
  std::vector<::xls::Value> y_elements;
  y_elements.reserve(ABSL_ARRAYSIZE(y));
  for (int idx_1 = 0; idx_1 < ABSL_ARRAYSIZE(y); idx_1++) {
    ::xls::Value y_element;
    y_element = ::xls::Value(::xls::SBits(y[idx_1], /*bit_count=*/7));
    y_elements.push_back(y_element);
  }
  y_value = ::xls::Value::ArrayOrDie(y_elements);
  members.push_back(y_value);
  ::xls::Value z_value;
  std::vector<::xls::Value> z_elements;
  z_elements.reserve(ABSL_ARRAYSIZE(z));
  for (int idx_1 = 0; idx_1 < ABSL_ARRAYSIZE(z); idx_1++) {
    ::xls::Value z_element;
    z_element = ::xls::Value(::xls::UBits(z[idx_1], /*bit_count=*/8));
    z_elements.push_back(z_element);
  }
  z_value = ::xls::Value::ArrayOrDie(z_elements);
  members.push_back(z_value);
  return ::xls::Value::Tuple(members);
}

std::ostream& operator<<(std::ostream& os, const MyStruct& data) {
  os << data.ToString();
  return os;
}
std::string MyStruct::ToString(int indent) const {
  std::string indent_str(indent * 4, ' ');
  ::xls::Value value = ToValue();
  absl::Span<const ::xls::Value> elements = value.elements();
  std::string result = "MyStruct {\n";
  result += indent_str + "  x: " + elements[0].ToString(::xls::FormatPreference::kHex) + ",\n";
  result += indent_str + "  y: " + elements[1].ToString(::xls::FormatPreference::kHex) + ",\n";
  result += indent_str + "  z: " + elements[2].ToString(::xls::FormatPreference::kHex) + ",\n";
  result += indent_str + "}";
  return result;
}

bool MyStruct::operator==(const MyStruct& other) const {
  return x == other.x && y == other.y && z == other.z;
}
