package test_module

fn ____test_module__f__2_counted_for_0_body(i: bits[32], accum: bits[32]) -> bits[32] {
  ret add.6: bits[32] = add(accum, i, id=6)
}

fn __test_module__f__2(x: bits[2]) -> bits[32] {
  literal.3: bits[32] = literal(value=0, id=3)
  literal.2: bits[32] = literal(value=2, id=2)
  ret counted_for.7: bits[32] = counted_for(literal.3, trip_count=2, stride=1, body=____test_module__f__2_counted_for_0_body, id=7)
}

fn __test_module__main() -> bits[32] {
  literal.8: bits[2] = literal(value=0, id=8)
  ret invoke.9: bits[32] = invoke(literal.8, to_apply=__test_module__f__2, id=9)
}
