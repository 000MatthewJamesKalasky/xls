package test_module

chan main_chandecl_test_module_x_28_18_28_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_8_20_8_28(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_9_20_9_28(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_10_20_10_28(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")
chan main__foo_chandecl_test_module_x_11_20_11_28(bits[32], id=4, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

proc __test_module__main_0_next(__token: token, __state: (), init=()) {
  tuple.3: () = tuple(id=3)
  after_all.4: token = after_all(__token, id=4)
  next (after_all.4, tuple.3)
}

proc __test_module__main__foo_0_next(__token: token, __state: (bits[32]), init=(0)) {
  state: bits[32] = tuple_index(__state, index=0, id=7)
  zero_ext.8: bits[32] = zero_ext(state, new_bit_count=32, id=8)
  zero_ext.10: bits[32] = zero_ext(state, new_bit_count=32, id=10)
  zero_ext.12: bits[32] = zero_ext(state, new_bit_count=32, id=12)
  tok0: token = send(__token, zero_ext.8, channel_id=1, id=9)
  zero_ext.16: bits[32] = zero_ext(state, new_bit_count=32, id=16)
  tok1: token = send(__token, zero_ext.10, channel_id=2, id=11)
  tok2: token = send(__token, zero_ext.12, channel_id=3, id=13)
  send.17: token = send(tok0, zero_ext.16, channel_id=1, id=17)
  tok: token = after_all(tok0, tok1, tok2, send.17, id=18)
  literal.22: bits[32] = literal(value=1, id=22)
  zero_ext.14: bits[32] = zero_ext(state, new_bit_count=32, id=14)
  receive.19: (token, bits[32]) = receive(tok, channel_id=4, id=19)
  add.23: bits[32] = add(state, literal.22, id=23)
  tok3: token = send(tok0, zero_ext.14, channel_id=1, id=15)
  tok__1: token = tuple_index(receive.19, index=0, id=20)
  value: bits[32] = tuple_index(receive.19, index=1, id=21)
  tuple.24: (bits[32]) = tuple(add.23, id=24)
  after_all.25: token = after_all(__token, tok0, tok1, tok2, tok3, send.17, tok, tok__1, id=25)
  next (after_all.25, tuple.24)
}
