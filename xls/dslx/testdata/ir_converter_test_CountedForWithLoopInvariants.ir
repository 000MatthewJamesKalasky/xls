package test_module

fn ____test_module__f_counted_for_0_body(i: bits[32], accum: bits[32], outer_thing_1: bits[32], outer_thing_2: bits[32]) -> bits[32] {
  add.12: bits[32] = add(accum, i, id=12)
  add.13: bits[32] = add(add.12, outer_thing_1, id=13)
  add.14: bits[32] = add(add.13, outer_thing_2, id=14)
  literal.10: bits[32] = literal(value=42, id=10)
  add.15: bits[32] = add(add.14, literal.10, id=15)
  literal.11: bits[32] = literal(value=24, id=11)
  ret add.16: bits[32] = add(add.15, literal.11, id=16)
}

fn __test_module__f(outer_thing_1: bits[32], outer_thing_2: bits[32]) -> bits[32] {
  literal.5: bits[32] = literal(value=0, id=5)
  literal.3: bits[32] = literal(value=42, id=3)
  literal.4: bits[32] = literal(value=24, id=4)
  ret counted_for.17: bits[32] = counted_for(literal.5, trip_count=4, stride=1, body=____test_module__f_counted_for_0_body, invariant_args=[outer_thing_1, outer_thing_2], id=17)
}
