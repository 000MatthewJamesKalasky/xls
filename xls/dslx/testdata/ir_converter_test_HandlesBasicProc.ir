package test_module

file_number 0 "fake_file.x"

chan main_chandecl_test_module_x_26_18_26_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

top proc __test_module__main_0_next(__token: token, __state: (), init=()) {
  tuple.3: () = tuple(id=3)
  after_all.4: token = after_all(__token, id=4)
  next (after_all.4, tuple.3)
}

proc __test_module__main__producer_0_next(__token: token, __state: (bits[32]), init=(0)) {
  i: bits[32] = tuple_index(__state, index=0, id=7)
  literal.9: bits[32] = literal(value=1, id=9)
  add.10: bits[32] = add(i, literal.9, id=10)
  tok: token = send(__token, i, channel_id=0, id=8)
  tuple.11: (bits[32]) = tuple(add.10, id=11)
  after_all.12: token = after_all(__token, tok, id=12)
  next (after_all.12, tuple.11)
}

proc __test_module__main__consumer_0_next(__token: token, __state: (bits[32]), init=(0)) {
  receive.16: (token, bits[32]) = receive(__token, channel_id=0, id=16)
  i__1: bits[32] = tuple_index(receive.16, index=1, id=18)
  add.19: bits[32] = add(i__1, i__1, id=19)
  tok: token = tuple_index(receive.16, index=0, id=17)
  i: bits[32] = tuple_index(__state, index=0, id=15)
  tuple.20: (bits[32]) = tuple(add.19, id=20)
  after_all.21: token = after_all(__token, tok, id=21)
  next (after_all.21, tuple.20)
}
