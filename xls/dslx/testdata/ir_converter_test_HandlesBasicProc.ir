package test_module

file_number 0 "fake_file.x"

chan main_chandecl_test_module_x_26_18_26_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

top proc __test_module__main_0_next(__token: token, __state: (), init={()}) {
  literal.3: bits[1] = literal(value=1, id=3)
  tuple.4: () = tuple(id=4)
  after_all.5: token = after_all(__token, id=5)
  next (after_all.5, tuple.4)
}

proc __test_module__main__producer_0_next(__token: token, __state: (bits[32]), init={(0)}) {
  i: bits[32] = tuple_index(__state, index=0, id=9)
  literal.11: bits[32] = literal(value=1, id=11)
  add.12: bits[32] = add(i, literal.11, id=12)
  tok: token = send(__token, i, channel_id=0, id=10)
  literal.8: bits[1] = literal(value=1, id=8)
  tuple.13: (bits[32]) = tuple(add.12, id=13)
  after_all.14: token = after_all(__token, tok, id=14)
  next (after_all.14, tuple.13)
}

proc __test_module__main__consumer_0_next(__token: token, __state: (bits[32]), init={(0)}) {
  receive.19: (token, bits[32]) = receive(__token, channel_id=0, id=19)
  i__1: bits[32] = tuple_index(receive.19, index=1, id=21)
  add.22: bits[32] = add(i__1, i__1, id=22)
  tok: token = tuple_index(receive.19, index=0, id=20)
  literal.17: bits[1] = literal(value=1, id=17)
  i: bits[32] = tuple_index(__state, index=0, id=18)
  tuple.23: (bits[32]) = tuple(add.22, id=23)
  after_all.24: token = after_all(__token, tok, id=24)
  next (after_all.24, tuple.23)
}
