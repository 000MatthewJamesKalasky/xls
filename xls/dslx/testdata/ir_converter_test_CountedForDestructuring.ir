package test_module

fn ____test_module__f_counted_for_0_body(i: bits[32], __loop_carry: (bits[32], bits[8])) -> (bits[32], bits[8]) {
  literal.6: bits[1] = literal(value=1, id=6)
  literal.8: bits[1] = literal(value=1, id=8)
  tuple_index.7: bits[32] = tuple_index(__loop_carry, index=0, id=7)
  and.9: bits[1] = and(literal.6, literal.8, id=9)
  literal.11: bits[1] = literal(value=1, id=11)
  add.13: bits[32] = add(tuple_index.7, i, id=13)
  tuple_index.10: bits[8] = tuple_index(__loop_carry, index=1, id=10)
  and.12: bits[1] = and(and.9, literal.11, id=12)
  ret tuple.14: (bits[32], bits[8]) = tuple(add.13, tuple_index.10, id=14)
}

fn __test_module__f() -> bits[32] {
  literal.1: bits[32] = literal(value=0, id=1)
  literal.2: bits[8] = literal(value=0, id=2)
  tuple.3: (bits[32], bits[8]) = tuple(literal.1, literal.2, id=3)
  t: (bits[32], bits[8]) = counted_for(tuple.3, trip_count=4, stride=1, body=____test_module__f_counted_for_0_body, id=15)
  literal.16: bits[32] = literal(value=0, id=16)
  ret tuple_index.17: bits[32] = tuple_index(t, index=0, id=17)
}
