package test_module

file_number 0 "fake_file.x"

fn ____itok__test_module__main_counted_for_0_body(i: bits[32], __token_wrapped: (token, bits[1], (bits[32], bits[32]))) -> (token, bits[1], (bits[32], bits[32])) {
  tuple_index.13: (bits[32], bits[32]) = tuple_index(__token_wrapped, index=2, id=13)
  tuple_index.15: bits[32] = tuple_index(tuple_index.13, index=0, id=15)
  tuple_index.18: bits[32] = tuple_index(tuple_index.13, index=1, id=18)
  literal.14: bits[1] = literal(value=1, id=14)
  literal.16: bits[1] = literal(value=1, id=16)
  tuple_index.12: bits[1] = tuple_index(__token_wrapped, index=1, id=12)
  tuple.21: (bits[32], bits[32]) = tuple(tuple_index.15, tuple_index.18, id=21)
  literal.8: bits[32] = literal(value=0, id=8)
  and.17: bits[1] = and(literal.14, literal.16, id=17)
  literal.19: bits[1] = literal(value=1, id=19)
  tuple_index.11: token = tuple_index(__token_wrapped, index=0, id=11)
  not.22: bits[1] = not(tuple_index.12, id=22)
  identity.24: (bits[32], bits[32]) = identity(tuple.21, id=24)
  add.9: bits[32] = add(i, literal.8, id=9)
  and.20: bits[1] = and(and.17, literal.19, id=20)
  assert.23: token = assert(tuple_index.11, not.22, message="Assertion failure via fail! @ test_module.x:4:10-4:18", id=23)
  ret tuple.25: (token, bits[1], (bits[32], bits[32])) = tuple(tuple_index.11, tuple_index.12, identity.24, id=25)
}

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, (bits[32], bits[32])) {
  literal.4: bits[32] = literal(value=0, id=4)
  literal.5: bits[32] = literal(value=0, id=5)
  tuple.6: (bits[32], bits[32]) = tuple(literal.4, literal.5, id=6)
  tuple.26: (token, bits[1], (bits[32], bits[32])) = tuple(__token, __activated, tuple.6, id=26)
  counted_for.27: (token, bits[1], (bits[32], bits[32])) = counted_for(tuple.26, trip_count=1, stride=1, body=____itok__test_module__main_counted_for_0_body, id=27)
  tuple_index.28: token = tuple_index(counted_for.27, index=0, id=28)
  after_all.30: token = after_all(tuple_index.28, id=30)
  tuple_index.29: (bits[32], bits[32]) = tuple_index(counted_for.27, index=2, id=29)
  ret tuple.31: (token, (bits[32], bits[32])) = tuple(after_all.30, tuple_index.29, id=31)
}
