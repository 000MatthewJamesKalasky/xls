package test_module

file_number 0 "fake_file.x"

chan main_chandecl_test_module_x_29_18_29_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

top proc __test_module__main_0_next(__token: token, __state: (), init=()) {
  tuple.3: () = tuple(id=3)
  after_all.4: token = after_all(__token, id=4)
  next (after_all.4, tuple.3)
}

proc __test_module__main__producer_0_next(__token: token, __state: (bits[1]), init=(1)) {
  do_send: bits[1] = tuple_index(__state, index=0, id=7)
  zero_ext.8: bits[32] = zero_ext(do_send, new_bit_count=32, id=8)
  not.10: bits[1] = not(do_send, id=10)
  _: token = send(__token, zero_ext.8, predicate=do_send, channel_id=0, id=9)
  tuple.11: (bits[1]) = tuple(not.10, id=11)
  after_all.12: token = after_all(__token, _, id=12)
  next (after_all.12, tuple.11)
}

proc __test_module__main__consumer_0_next(__token: token, __state: (bits[1]), init=(1)) {
  do_recv: bits[1] = tuple_index(__state, index=0, id=15)
  receive.16: (token, bits[32]) = receive(__token, predicate=do_recv, channel_id=0, id=16)
  not.19: bits[1] = not(do_recv, id=19)
  tuple_index.17: token = tuple_index(receive.16, index=0, id=17)
  foo: bits[32] = tuple_index(receive.16, index=1, id=18)
  tuple.20: (bits[1]) = tuple(not.19, id=20)
  after_all.21: token = after_all(__token, tuple_index.17, id=21)
  next (after_all.21, tuple.20)
}
