package test_module

file_number 0 "fake_file.x"

chan main_chandecl_test_module_x_29_18_29_26(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, metadata="""""")

top proc __test_module__main_0_next(__token: token, __state: (), init={()}) {
  literal.3: bits[1] = literal(value=1, id=3)
  tuple.4: () = tuple(id=4)
  after_all.5: token = after_all(__token, id=5)
  next (after_all.5, tuple.4)
}

proc __test_module__main__producer_0_next(__token: token, __state: (bits[1]), init={(1)}) {
  do_send: bits[1] = tuple_index(__state, index=0, id=9)
  zero_ext.10: bits[32] = zero_ext(do_send, new_bit_count=32, id=10)
  not.12: bits[1] = not(do_send, id=12)
  _: token = send(__token, zero_ext.10, predicate=do_send, channel_id=0, id=11)
  literal.8: bits[1] = literal(value=1, id=8)
  tuple.13: (bits[1]) = tuple(not.12, id=13)
  after_all.14: token = after_all(__token, _, id=14)
  next (after_all.14, tuple.13)
}

proc __test_module__main__consumer_0_next(__token: token, __state: (bits[1]), init={(1)}) {
  do_recv: bits[1] = tuple_index(__state, index=0, id=18)
  receive.19: (token, bits[32]) = receive(__token, predicate=do_recv, channel_id=0, id=19)
  not.22: bits[1] = not(do_recv, id=22)
  tuple_index.20: token = tuple_index(receive.19, index=0, id=20)
  literal.17: bits[1] = literal(value=1, id=17)
  foo: bits[32] = tuple_index(receive.19, index=1, id=21)
  tuple.23: (bits[1]) = tuple(not.22, id=23)
  after_all.24: token = after_all(__token, tuple_index.20, id=24)
  next (after_all.24, tuple.23)
}
