package test_module

fn ____test_module__f__32_counted_for_0_body(i: bits[32], accum: bits[32]) -> bits[32] {
  ret zero_ext.7: bits[32] = zero_ext(accum, new_bit_count=32, id=7)
}

fn __test_module__f__32(init: bits[32]) -> bits[32] {
  literal.2: bits[32] = literal(value=32, id=2)
  literal.3: bits[32] = literal(value=0, id=3)
  literal.4: bits[32] = literal(value=4, id=4)
  ret counted_for.8: bits[32] = counted_for(init, trip_count=4, stride=1, body=____test_module__f__32_counted_for_0_body, id=8)
}

fn __test_module__main() -> bits[32] {
  literal.9: bits[32] = literal(value=0, id=9)
  ret invoke.10: bits[32] = invoke(literal.9, to_apply=__test_module__f__32, id=10)
}
