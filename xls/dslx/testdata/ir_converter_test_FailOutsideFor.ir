package test_module

file_number 0 "fake_file.x"

fn ____itok__test_module__main_counted_for_0_body(i: bits[32], __token_wrapped: (token, bits[1], bits[32])) -> (token, bits[1], bits[32]) {
  literal.6: bits[32] = literal(value=0, id=6)
  tuple_index.9: token = tuple_index(__token_wrapped, index=0, id=9)
  tuple_index.10: bits[1] = tuple_index(__token_wrapped, index=1, id=10)
  tuple_index.11: bits[32] = tuple_index(__token_wrapped, index=2, id=11)
  add.7: bits[32] = add(i, literal.6, id=7)
  ret tuple.12: (token, bits[1], bits[32]) = tuple(tuple_index.9, tuple_index.10, tuple_index.11, id=12)
}

fn __itok__test_module__main(__token: token, __activated: bits[1], x: bits[32]) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=0, id=4)
  tuple.13: (token, bits[1], bits[32]) = tuple(__token, __activated, literal.4, id=13)
  counted_for.14: (token, bits[1], bits[32]) = counted_for(tuple.13, trip_count=1, stride=1, body=____itok__test_module__main_counted_for_0_body, id=14)
  not.17: bits[1] = not(__activated, id=17)
  tuple_index.15: token = tuple_index(counted_for.14, index=0, id=15)
  assert.18: token = assert(__token, not.17, message="Assertion failure via fail! @ test_module.x:6:8-6:11", id=18)
  x__1: bits[32] = tuple_index(counted_for.14, index=2, id=16)
  after_all.20: token = after_all(tuple_index.15, assert.18, id=20)
  identity.19: bits[32] = identity(x__1, id=19)
  ret tuple.21: (token, bits[32]) = tuple(after_all.20, identity.19, id=21)
}
